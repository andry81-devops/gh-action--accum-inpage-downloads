# Tutorial to use with: https://github.com/andry81-devops/github-accum-stats
#

name: accum-inpage-downloads
description: 'GitHub composite action to request and accumulate downloads statistic from a value on a web page'

inputs:
  query_url:
    description: 'URL to query a page with downloads value'
    required: true

  downloads_sed_regexp:
    description: 'Sed regexp to match the downloads value'
    required: true
    # example:
    #   `s/.*Downloaded:[^0-9]*([0-9.]+).*/\1/p`

  curl_flags:
    description: 'additional curl flags'
    # example:
    #   `-H 'Cache-Control: no-cache'`

  deps_repo_owner:
    description: 'Owner of a repository used to checkout dependencies'
    required: true

  deps_repo_branch:
    description: 'Repository branch used to checkout dependencies'
    default: master

  deps_repo_read_token:
    description: 'PAT token to a repository used to checkout dependencies'
    default: ${{ github.token }}

  commit_msg_entity:
    description: 'Commit message entity'
    # examples:
    # - my-download-link-1
    # - my-download-link-2

  output_repo_owner:
    description: 'Owner of a repository used to output the statistic'
    required: true

  output_repo:
    description: 'Repository name used to output the statistic'
    required: true

  output_repo_branch:
    description: 'Repository branch used to output the statistic'
    default: master

  output_repo_dir:
    description: 'Output repository relative directory path to store requested and accumulated statistic'
    required: true
    # examples:
    # - traffic/downloads/plugin

  output_repo_write_token:
    description: 'PAT token to the output repository with write/push access rights'
    required: true

  # NOTE:
  #   The `flags` converts into `GH_WORKFLOW_FLAGS` environment variable as a single line string.
  #   You must evaluate it to a shell array to be able to use it in the bash shell: `eval __flags__=($GH_WORKFLOW_FLAGS)`
  #

  flags:
    description: >
      String of flag values list in format of `NAME[=[EXPR]]` ready to be evaluated as a shell array: `(<0> <1> ... <N>)`.
      If `EXPR` is not empty and begins by '[' then, use `eval EXPR` instead of `(( EXPR ))` expression.
      Otherwise if a flag expression is `NAME=`, then false (unflagged).
      Otherwise if a flag expression is `NAME`, then true (flagged).
    # See dependent repositories and scripts for details.
    # Flag expression examples:
    #   # A is true, B is true, C is false, D is true, F is false, T is true.
    #   # GH_WORKFLOW_FLAGS=`A=1 B="1 + 1" C="1 - 1" D='[[ "1" -eq "1" ]]' F= T`
    #   flags: >-
    #     A=1
    #     B="1 + 1"
    #     C="1 - 1"
    #     D='[[ "1" -eq "1" ]]'
    #     F=
    #     T
    # builtin flag names:
    #   ENABLE_PRINT_INITIAL_ENV_INTO_STDOUT=1

  env:
    description: environment variables
    # See dependent repositories and scripts for details.
    # examples:
    #   ENABLE_GENERATE_CHANGELOG_FILE=1
    #   CHANGELOG_FILE=changelog.txt
    #   ENABLE_PRINT_CURL_RESPONSE_ON_ERROR=1
    #   ENABLE_COMMIT_MESSAGE_DATE_WITH_TIME=1            # insert the time string in format HH:MMZ additionally after the date in each commit message
    #   ENABLE_COMMIT_MESSAGE_WITH_WORKFLOW_RUN_NUMBER=1  # insert the workflow run number after date/time prefix in each commit message
    #   ENABLE_GITHUB_ACTIONS_RUN_URL_PRINT_TO_CHANGELOG=1
    #   ENABLE_COMMIT_REFERENCE_URL_PRINT_TO_CHANGELOG=1
    #   CONTINUE_ON_INVALID_INPUT=1
    #   CONTINUE_ON_EMPTY_CHANGES=1

runs:
  using: "composite"
  steps:
    - name: load `flags` parameter into `GH_WORKFLOW_FLAGS` environment variable
      shell: bash
      run: |
        # suppress not zero exit code
        { IFS=$' \t' read -r -d '' GH_WORKFLOW_FLAGS || (( 1 )); } <<::EOF::
        ${{ inputs.flags }}
        ::EOF::
        GH_WORKFLOW_FLAGS="${GH_WORKFLOW_FLAGS//[$'\n\r']/}" # remove all line returns
        echo "GH_WORKFLOW_FLAGS=$GH_WORKFLOW_FLAGS" >> $GITHUB_ENV

    - name: print initial environment variables
      shell: bash
      run: |
        eval __flags__=($GH_WORKFLOW_FLAGS)
        for arg in "${__flags__[@]}"; do
          # suppress not zero exit code
          IFS=$'=\n' read -r -d '' name value <<< "$arg" || (( 1 ))
          if [[ "$name" == 'ENABLE_PRINT_INITIAL_ENV_INTO_STDOUT' ]]; then
            # If `value` is not empty and begins by '[' then, use `eval "$value"` instead of `(( value ))` expression.
            # Otherwise if `value` is empty and `arg` with assign character, then false (unflagged).
            # Otherwise if `value` is empty and `arg` without assign character, then true (flagged).
            if [[ -z "$value" && "${arg/=/}" == "$arg" ]] || ( [[ "${value:0:1}" != "[" ]] && (( value )) ) || ( [[ "${value:0:1}" == "[" ]] && eval "$value" ) ; then
              env | sort
              break
            fi
          fi
        done

    # step is required to workaround variable expansion in variables
    - name: declare dependent variables
      shell: bash
      run: |
        echo "GH_WORKFLOW_ROOT=$GITHUB_WORKSPACE/gh-workflow" >> $GITHUB_ENV

    - name: checkout gh-workflow@${{ inputs.deps_repo_branch }}
      uses: andry81-devops/gh-action--git-checkout@master
      with:
        repository: ${{ inputs.deps_repo_owner }}/gh-workflow
        ref:        ${{ inputs.deps_repo_branch }}
        path:       gh-workflow
        token:      ${{ inputs.deps_repo_read_token }}

        mkdir-p: >-
          ${{ env.GH_WORKFLOW_ROOT }}

    - name: update permissions
      shell: bash
      run: |
        chmod ug+x $GH_WORKFLOW_ROOT/bash/_common/update-permissions.sh
        $GH_WORKFLOW_ROOT/bash/_common/update-permissions.sh ug+x "$GH_WORKFLOW_ROOT/bash" -iname '*.sh'

    # step is required to pass environment variables externally
    - name: declare variables from lists
      shell: bash
      run: |
        # suppress not zero exit code
        { IFS=$' \t' read -r -d '' INPUT_ENV || (( 1 )); } <<::EOF::
        ${{ inputs.env }}
        ::EOF::
        INPUT_ENV="${INPUT_ENV//[$'\n\r']/}" # remove all line returns
        $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
          ${INPUT_ENV} \
          "GHWF_GITHUB_ACTIONS_RUN_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

    - name: variables validation
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
          "CHANGELOG_FILE=${CHANGELOG_FILE:-"changelog.txt"}"

    - name: declare local variables
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
          "changelog_file=$CHANGELOG_FILE" \
          "CHANGELOG_FILE=$GITHUB_WORKSPACE/inpage-downloads/${{ inputs.output_repo_dir }}/$CHANGELOG_FILE" \
          "commit_msg_entity=${{ inputs.commit_msg_entity }}" \
          "stats_dir=$GITHUB_WORKSPACE/inpage-downloads/${{ inputs.output_repo_dir }}" \
          "query_url=${{ inputs.query_url }}" \
          "downloads_sed_regexp=${{ inputs.downloads_sed_regexp }}" \
          "curl_flags=${{ inputs.curl_flags }}"

    - name: declare local variables
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
          "changelog_dir=${CHANGELOG_FILE%/*}"

    - name: head annotations
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/github/print-notice.sh \
          "query url: ${{ inputs.query_url }}" \
          "output repo dir: https://github.com/${{ inputs.output_repo_owner }}/${{ inputs.output_repo }}/tree/${{ inputs.output_repo_branch }}/${{ inputs.output_repo_dir }}"
        $GH_WORKFLOW_ROOT/bash/github/print-notice-ln.sh \
          "changelog file: https://github.com/${{ inputs.output_repo_owner }}/${{ inputs.output_repo }}/tree/${{ inputs.output_repo_branch }}/${{ inputs.output_repo_dir }}/$changelog_file" \
          "env:"$'\n'"  GITHUB_RUN_ID=\`$GITHUB_RUN_ID\`"$'\n'"  GITHUB_RUN_NUMBER=\`$GITHUB_RUN_NUMBER\`"

    - name: checkout inpage-downloads@${{ inputs.output_repo_branch }}
      uses: andry81-devops/gh-action--git-checkout@master
      with:
        repository: ${{ inputs.output_repo_owner }}/${{ inputs.output_repo }}
        ref:        ${{ inputs.output_repo_branch }}
        path:       inpage-downloads
        token:      ${{ inputs.output_repo_write_token }}

        mkdir-p: >-
          ${{ inputs.output_repo_dir }}
          ${{ env.changelog_dir }}

    - name: accumulate inpage-downloads
      id: accum-downloads
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/inpage/accum-downloads.sh
        # caution: no operation after that line if non zero exit code happens above

    - name: commit inpage-downloads
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/inpage-downloads
        git add .
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"
        COMMIT_MESSAGE="A/U: $COMMIT_MESSAGE_DATE_TIME_PREFIX:"
        if (( ENABLE_COMMIT_MESSAGE_WITH_WORKFLOW_RUN_NUMBER )) && [[ -n "$GITHUB_RUN_NUMBER" ]]; then
          COMMIT_MESSAGE="$COMMIT_MESSAGE #$GITHUB_RUN_NUMBER:"
        fi
        COMMIT_MESSAGE="$COMMIT_MESSAGE ${COMMIT_MESSAGE_PREFIX}${COMMIT_MESSAGE_SUFFIX:+" | "}$COMMIT_MESSAGE_SUFFIX"
        git commit -m "$COMMIT_MESSAGE"
        $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
          "HEAD_COMMIT_HASH=$(git rev-parse HEAD)"

    - name: push inpage-downloads
      uses: ad-m/github-push-action@master
      with:
        repository:   ${{ inputs.output_repo_owner }}/${{ inputs.output_repo }}
        branch:       ${{ inputs.output_repo_branch }}
        directory:    inpage-downloads
        github_token: ${{ inputs.output_repo_write_token }}

    - name: print commit parameters
      shell: bash
      run: |
        if (( ENABLE_COMMIT_REFERENCE_URL_PRINT_TO_CHANGELOG )); then
          $GH_WORKFLOW_ROOT/bash/_common/source-and-call.sh \
            $GH_WORKFLOW_ROOT/bash/github/print-notice.sh \
            gh_print_notice_and_write_to_changelog_text_bullet_ln \
              "commit reference url: https://github.com/${{ inputs.output_repo_owner }}/${{ inputs.output_repo }}/commit/$HEAD_COMMIT_HASH" \
              "Commit Reference URL: https://github.com/${{ inputs.output_repo_owner }}/${{ inputs.output_repo }}/commit/$HEAD_COMMIT_HASH"
        else
          $GH_WORKFLOW_ROOT/bash/github/print-notice.sh \
            "commit reference url: https://github.com/${{ inputs.output_repo_owner }}/${{ inputs.output_repo }}/commit/$HEAD_COMMIT_HASH"
        fi

    - name: flush print annotations
      if: always()
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/github/flush-print-annotations.sh
